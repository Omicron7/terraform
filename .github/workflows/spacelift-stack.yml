name: Spacelift Stacks

on:
  pull_request:
    branches:
      - main

jobs:
  changes:
    name: Check for Terraform Project Changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: tj-actions/changed-files@v43
        id: changed
        with:
          files: |
            **/terraform.tf
    outputs:
      added: ${{ steps.changed.outputs.added_files }}
      added_count: ${{ steps.changed.outputs.added_files_count }}
      removed: ${{ steps.changed.outputs.deleted_files }}
      removed_count: ${{ steps.changed.outputs.deleted_files_count }}

  token:
    name: Login to Spacelift
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.added_count > 0 || needs.changes.outputs.removed_count > 0
    steps:
      - id: login
        env:
          SPACELIFT_API_KEY_ENDPOINT: ${{ secrets.SPACELIFT_API_KEY_ENDPOINT }}
          SPACELIFT_API_KEY_ID: ${{ secrets.SPACELIFT_API_KEY_ID }}
          SPACELIFT_API_KEY_SECRET: ${{ secrets.SPACELIFT_API_KEY_SECRET }}
        run: |
          response=$(curl -s --request POST \
            --url ${SPACELIFT_API_KEY_ENDPOINT}graphql \
            --header 'Content-Type: application/json' \
            --data '{
              "query":"mutation GetSpaceliftToken($keyId: ID!, $keySecret: String!) { apiKeyUser(id: $keyId, secret: $keySecret) { id jwt } }",
              "variables":{"keyId":"'${SPACELIFT_API_KEY_ID}'","keySecret":"'${SPACELIFT_API_KEY_SECRET}'"},
              "operationName":"GetSpaceliftToken"
            }' | jq -r '.data.apiKeyUser.jwt')
          token=$(echo response | base64)
          echo "TOKEN=$token" >> "$GITHUB_OUTPUT"
    outputs:
      token: ${{ steps.login.outputs.TOKEN }}

  added:
    name: Add Spacelift Stacks
    needs: [changes, token]
    if: needs.changes.outputs.added_count > 0
    runs-on: ubuntu-latest

    env:
      SPACELIFT_API_KEY_ENDPOINT: ${{ secrets.SPACELIFT_API_KEY_ENDPOINT }}
      SPACELIFT_API_TOKEN: ${{ needs.token.outputs.token }}

    steps:
      - id: add
        env:
          ADDED_FILES: ${{ needs.changes.outputs.added }}
        run: |
          for file in ${ADDED_FILES}; do
            echo "$file was added"
            name=$(dirname $file)
            response=$(curl -s --request POST \
              --url ${SPACELIFT_API_KEY_ENDPOINT}graphql \
              --header "Authorization: Bearer $(echo $SPACELIFT_API_TOKEN | base64 -d)" \
              --header 'Content-Type: application/json' \
              --data '{
                "query":"mutation StackCreate($name: String!) {
                  stackCreate(
                    input: {
                      name: $name
                      administrative: false
                      autodeploy: false
                      repository: \"terraform\"
                      branch: \"main\"
                      labels: [\"nobackend\"]
                      space: \"omicron7-01HS1TBZCJ35FSNJ9AC9QTY7WF\"
                    }
                    manageState: false
                  ) { id }
                }",
                "operationName":"StackCreate",
                "variables":"{\"name\": \"applications/foo\"}"
              }' | jq -r '.data.stackCreate.id')
          done
